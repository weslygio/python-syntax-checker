Terminals:
spasi0 spasi1 = + - * % ( ) [ ] { } / // ** == >= <= > < != # ' " : . 
in and or not from import as angka text variabel if elif else for def
nl false none true pass break continue return raise

Variables:
S SValid SLoop Statement Ekspresi Literal String 
OpArit AddOp MulOp OpBoolBiner OpBoolUner Operator Operand NewOperand PosMin 
FungsiD FungsiC Argumen Parameter ElemenList CallMethod NewArgumen ReturnEC NewParameter Index 
IfThenElse IfPart1 IfPart2 IfPart3 IfPart2Star IfPart3EC 
ForLoop ForLoop1 ForLoop2 ForLoop3 ForLoop4 
WhileLoop WhileLoop1 WhileLoop2

Productions:
S -> SValid nl S | SValid nl;
SValid -> nl;
SValid -> Statement;
SValid -> IfThenElse;
SValid -> ForLoop;
SValid -> WhileLoop;

Statement -> Ekspresi spasi0;
Statement -> variabel spasi0 = spasi0 Ekspresi spasi0;
Statement -> variabel spasi0 OpArit = spasi0 Ekspresi spasi0;
Statement -> import spasi1 variabel spasi1 as spasi1 variabel spasi0;
Statement -> from spasi1 variabel spasi1 import spasi1 variabel spasi0;
Statement -> import spasi1 variabel spasi0;
Statement -> from spasi1 variabel spasi1 import spasi1 variabel spasi1 as spasi1 variabel spasi0;
Statement -> # text;
Statement -> pass
Statement -> raise spasi1 variabel spasi0;

OpArit -> AddOp | MulOp;
AddOp -> + | -;
MulOp -> * | / | // | % | **;

OpBoolBiner -> == | >= | <= | > | < | != | in | and | or;
OpBoolUner -> not;
Operator -> OpArit | OpBoolBiner;

Ekspresi -> Operand | Ekspresi spasi0 Operator spasi0 Operand;
Ekspresi -> OpBoolUner spasi1 Operand | OpBoolUner spasi0 ( spasi0 Operand spasi0 );
Ekspresi -> ( spasi0 Ekspresi spasi0 );

Operand -> variabel | Literal | FungsiC | String | true | false | none;
Operand -> ( spasi0 Operand spasi0 NewOperand spasi0 );
Operand -> [ spasi0 Operand spasi0 NewOperand spasi0 ];
Operand -> { spasi0 Operand spasi0 NewOperand spasi0 };
NewOperand -> , spasi0 Operand | epsilon;

Literal -> PosMin spasi0 Angka | PosMin spasi0 Angka . Angka | PosMin spasi0 . Angka;
PosMin -> AddOp spasi0 PosMin | epsilon;

FungsiC -> CallMethod variabel spasi0 ( spasi0 Argumen spasi0 );
CallMethod -> variabel . | epsilon;
Argumen -> Ekspresi spasi0 NewArgumen spasi0 | epsilon;
NewArgumen -> , spasi0 Ekspresi | epsilon;

FungsiD -> def spasi1 variabel spasi0 ( spasi0 Parameter spasi0 ) : spasi0 nl S ReturnEC;
ReturnEC -> return Ekspresi
Parameter -> variabel spasi0 NewParameter spasi0 | epsilon;
NewParameter -> , spasi0 variabel | epsilon;

ElemenList -> variabel Index;
Index -> [ Ekspresi ] Index | [ Ekspresi ];

String -> ' text ' | " text ";

IfThenElse -> IfPart1 S IfPart2Star IfPart3EC;
IfPart2Star -> IfPart2 S IfPart2Star | epsilon;
IfPart3EC -> IfPart3 S | epsilon;

IfPart1 -> if spasi1 Ekspresi spasi0 : spasi0 nl;
IfPart1 -> if spasi0 ( Ekspresi ) spasi0 : spasi0 nl;
IfPart2 -> elif spasi1 Ekspresi spasi0 : spasi0 nl;
IfPart2 -> if spasi0 ( Ekspresi ) spasi0 : spasi0 nl;
IfPart3 -> else spasi0 : spasi0 nl;


SLoop -> S SLoop S | break | continue | epsilon;

ForLoop -> ForLoop1 SLoop | ForLoop2 SLoop | ForLoop3 SLoop | ForLoop4 SLoop;

ForLoop1 -> for spasi0 ( variabel ) spasi0 in spasi0 ( Ekspresi ) spasi0 : spasi0 nl;
ForLoop2 -> for spasi0 ( variabel ) spasi0 in spasi1 Ekspresi spasi0 : spasi0 nl;
ForLoop3 -> for spasi1 variabel spasi0 in spasi0 ( Ekspresi ) spasi0 : spasi0 nl;
ForLoop4 -> for spasi1 variabel spasi1 in spasi1 Ekspresi spasi0 : spasi0 nl;


WhileLoop -> WhileLoop1 SLoop | WhileLoop2 SLoop;

WhileLoop1 -> while spasi0 ( Ekspresi ) spasi0 : nl;
WhileLoop2 -> while spasi1 Ekspresi spasi0 : nl
