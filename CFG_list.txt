Terminals:
= + - * % ( ) [ ] { } / // ** == >= <= > < != # ' " : . , ''' """ ! @ $ ^ & \ ? ~ 
in and or not from import as angka variabel if elif else for def 
nl false none true pass break continue return raise is class

Variables:
S SValid SLoop SReturn Statement Ekspresi Literal String MultilineString Text TextwithNL Symbol 
OpArit AddOp MulOp OpBoolBiner OpBoolUner Operator Operand NewOperand PosMin 
FungsiD FungsiC Argumen Parameter ElemenList CallMethod NewArgumen ReturnEC NewParameter Index 
IfThenElse IfPart1 IfPart2 IfPart3 IfPart2Star IfPart3EC 
IfThenElseReturn IfPart2StarReturn IfPart3ECReturn 
IfThenElseLoop IfPart2StarLoop IfPart3ECLoop 
ForLoop ForLoop1 ForLoop2 ForLoop3 ForLoop4 
WhileLoop WhileLoop1 WhileLoop2

Productions:
S -> S nl SValid | SValid | SValid nl S | e;
SValid -> nl;
SValid -> Statement;
SValid -> IfThenElse;
SValid -> ForLoop;
SValid -> WhileLoop;
SValid -> MultilineString;
SValid -> FungsiD;
SValid -> FungsiC;

Statement -> Ekspresi;
Statement -> variabel = Ekspresi;
Statement -> variabel OpArit = Ekspresi;
Statement -> import variabel as variabel;
Statement -> from variabel import variabel;
Statement -> from variabel import *;
Statement -> import variabel;
Statement -> from variabel import variabel as variabel;
Statement -> # Text nl;
Statement -> pass;
Statement -> raise variabel;

OpArit -> AddOp | MulOp;
AddOp -> + | -;
MulOp -> * | / | // | % | **;

OpBoolBiner -> == | >= | <= | > | < | != | in | and | or | is;
OpBoolUner -> not;
Operator -> OpArit | OpBoolBiner;

Ekspresi -> Operand | Ekspresi Operator Operand;
Ekspresi -> OpBoolUner Operand | OpBoolUner ( Operand );
Ekspresi -> ( Ekspresi );

Operand -> variabel | Literal | FungsiC | String | true | false | none | MultilineString;
Operand -> ( Operand NewOperand );
Operand -> [ Operand NewOperand ];
Operand -> { Operand NewOperand };
NewOperand -> , Operand | e;

Literal -> PosMin angka;
PosMin -> AddOp PosMin | e;

FungsiC -> CallMethod variabel ( Argumen );
CallMethod -> variabel . | ElemenList . | e;
Argumen -> Ekspresi NewArgumen | e;
NewArgumen -> , Ekspresi NewArgumen | e;

FungsiD -> def variabel ( Parameter ) : nl SReturn;
ReturnEC -> return Ekspresi;
Parameter -> variabel NewParameter | e;
NewParameter -> , variabel NewParameter | e;

SReturn -> SReturn SReturn | IfThenElseReturn | S | ReturnEC | nl | e;

IfThenElseReturn -> IfPart1 SReturn IfPart2StarReturn IfPart3ECReturn;
IfPart2StarReturn -> IfPart2 SReturn IfPart2StarReturn | e;
IfPart3ECReturn -> IfPart3 SReturn | e;

ElemenList -> variabel Index;
Index -> [ Ekspresi ] Index | [ Ekspresi ];

String -> ' Text ' | " Text ";

TextwithNL -> TextwithNL TextwithNL | Text | nl;
MultilineString -> ''' TextwithNL ''' | """ TextwithNL """;
IfThenElse -> IfPart1 S IfPart2Star IfPart3EC;
IfPart2Star -> IfPart2 S IfPart2Star | e;
IfPart3EC -> IfPart3 S | e;

IfPart1 -> if Ekspresi : nl;
IfPart1 -> if ( Ekspresi ) : nl;
IfPart2 -> elif Ekspresi : nl;
IfPart2 -> if ( Ekspresi ) : nl;
IfPart3 -> else : nl;

SLoop -> SLoop SLoop | S | IfThenElseLoop | break | continue | nl | e;

IfThenElseLoop -> IfPart1 SLoop IfPart2StarLoop IfPart3ECLoop;
IfPart2StarLoop -> IfPart2 SLoop IfPart2StarLoop | e;
IfPart3ECLoop -> IfPart3 SLoop | e;

ForLoop -> ForLoop1 SLoop | ForLoop2 SLoop | ForLoop3 SLoop | ForLoop4 SLoop;

ForLoop1 -> for ( variabel ) in ( Ekspresi ) : nl;
ForLoop2 -> for ( variabel ) in Ekspresi : nl;
ForLoop3 -> for variabel in ( Ekspresi ) : nl;
ForLoop4 -> for variabel in Ekspresi : nl;

WhileLoop -> WhileLoop1 SLoop | WhileLoop2 SLoop;

WhileLoop1 -> while ( Ekspresi ) : nl;
WhileLoop2 -> while Ekspresi : nl;

Symbol -> ! | @ | # | $ | ^ | & | \ | ? | ~ | = | ( | ) | + | - | * | / | < | > | , | . | : | { | } | [ | ] | %;

Text -> e;
Text -> variabel Text;
Text -> angka Text;
Text -> Symbol Text